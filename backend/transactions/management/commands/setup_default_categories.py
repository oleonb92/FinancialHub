from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from transactions.models import Category
from organizations.models import Organization
import logging

logger = logging.getLogger(__name__)
User = get_user_model()

class Command(BaseCommand):
    help = 'Configura categor√≠as y subcategor√≠as por defecto para todas las organizaciones'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üöÄ Configurando categor√≠as por defecto...'))
        
        # Categor√≠as principales por defecto
        default_categories = [
            {
                'name': 'Alimentaci√≥n',
                'color': '#FF6B6B',
                'subcategories': [
                    'Supermercado', 'Restaurantes', 'Caf√©', 'Delivery', 'Snacks'
                ]
            },
            {
                'name': 'Transporte',
                'color': '#4ECDC4',
                'subcategories': [
                    'Gasolina', 'Transporte p√∫blico', 'Taxi/Uber', 'Mantenimiento', 'Estacionamiento'
                ]
            },
            {
                'name': 'Vivienda',
                'color': '#45B7D1',
                'subcategories': [
                    'Renta', 'Hipoteca', 'Servicios p√∫blicos', 'Mantenimiento', 'Seguros'
                ]
            },
            {
                'name': 'Salud',
                'color': '#96CEB4',
                'subcategories': [
                    'M√©dico', 'Farmacia', 'Seguro m√©dico', 'Dental', '√ìptica'
                ]
            },
            {
                'name': 'Entretenimiento',
                'color': '#FFEAA7',
                'subcategories': [
                    'Cine', 'Conciertos', 'Deportes', 'Juegos', 'Hobbies'
                ]
            },
            {
                'name': 'Educaci√≥n',
                'color': '#DDA0DD',
                'subcategories': [
                    'Matr√≠cula', 'Libros', 'Cursos', 'Material escolar', 'Tecnolog√≠a educativa'
                ]
            },
            {
                'name': 'Ropa y Accesorios',
                'color': '#FFB6C1',
                'subcategories': [
                    'Ropa', 'Zapatos', 'Accesorios', 'Joyer√≠a', 'Cosm√©ticos'
                ]
            },
            {
                'name': 'Tecnolog√≠a',
                'color': '#87CEEB',
                'subcategories': [
                    'Electr√≥nicos', 'Software', 'Servicios digitales', 'Reparaciones', 'Accesorios'
                ]
            },
            {
                'name': 'Servicios Financieros',
                'color': '#98FB98',
                'subcategories': [
                    'Comisiones bancarias', 'Seguros', 'Inversiones', 'Pr√©stamos', 'Tarjetas de cr√©dito'
                ]
            },
            {
                'name': 'Ingresos',
                'color': '#32CD32',
                'subcategories': [
                    'Salario', 'Freelance', 'Inversiones', 'Ventas', 'Bonos'
                ]
            },
            {
                'name': 'Otros',
                'color': '#D3D3D3',
                'subcategories': [
                    'Regalos', 'Donaciones', 'Impuestos', 'Multas', 'Otros gastos'
                ]
            }
        ]
        
        organizations = Organization.objects.all()
        total_created = 0
        
        for organization in organizations:
            self.stdout.write(f'üìä Configurando organizaci√≥n: {organization.name}')
            
            # Obtener el primer usuario de la organizaci√≥n como created_by
            first_user = organization.users.first()
            if not first_user:
                self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è  No hay usuarios en la organizaci√≥n {organization.name}'))
                continue
            
            for cat_data in default_categories:
                # Crear categor√≠a principal si no existe
                category, created = Category.objects.get_or_create(
                    name=cat_data['name'],
                    organization=organization,
                    parent=None,  # Categor√≠a principal
                    defaults={
                        'created_by': first_user
                    }
                )
                
                if created:
                    total_created += 1
                    self.stdout.write(f'  ‚úÖ Categor√≠a creada: {category.name}')
                
                # Crear subcategor√≠as
                for subcat_name in cat_data['subcategories']:
                    subcategory, sub_created = Category.objects.get_or_create(
                        name=subcat_name,
                        organization=organization,
                        parent=category,  # Subcategor√≠a de la categor√≠a principal
                        defaults={
                            'created_by': first_user
                        }
                    )
                    
                    if sub_created:
                        total_created += 1
                        self.stdout.write(f'    üìù Subcategor√≠a creada: {subcategory.name}')
        
        self.stdout.write(self.style.SUCCESS(f'üéâ Configuraci√≥n completada! Se crearon {total_created} elementos.'))
        self.stdout.write(self.style.SUCCESS('üí° Las categor√≠as por defecto est√°n listas para que la IA las use como referencia.')) 